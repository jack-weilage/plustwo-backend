//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use super::sea_orm_active_enums::MessageKind;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "messages")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub broadcast_id: i64,
    pub chatter_id: i64,
    pub sent_at: DateTime,
    pub message_kind: MessageKind,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::broadcasts::Entity",
        from = "Column::BroadcastId",
        to = "super::broadcasts::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Broadcasts,
    #[sea_orm(
        belongs_to = "super::chatters::Entity",
        from = "Column::ChatterId",
        to = "super::chatters::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chatters,
}

impl Related<super::broadcasts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Broadcasts.def()
    }
}

impl Related<super::chatters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chatters.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
